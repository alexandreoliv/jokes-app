import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { Joke } from "../../types/Joke";
import { fetchJokebox, fetchBonusJoke } from "./jokeboxAPI";

export interface JokeboxState {
	// value: number;
	jokes: object[];
	status: "idle" | "loading" | "failed";
}

const initialState: JokeboxState = {
	jokes: [],
	status: "idle",
};

export const fetchJokeboxAsync = createAsyncThunk(
	"jokebox/fetchJokebox",
	async (joke: any) => {
		const response = await fetchJokebox(joke);
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const fetchBonusJokeAsync = createAsyncThunk(
	"jokebox/increment",
	async (joke: Joke) => {
		const response = await fetchBonusJoke(joke);
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const jokeboxSlice = createSlice({
	name: "jokebox",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		// increment: (state, action: PayloadAction) => {
		// 	// Redux Toolkit allows us to write "mutating" logic in reducers. It
		// 	// doesn't actually mutate the state because it uses the Immer library,
		// 	// which detects changes to a "draft state" and produces a brand new
		// 	// immutable state based off those changes
		// 	state.jokes.push(action.payload);
		// },
		decrement: (state) => {
			state.jokes.pop();
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state, action: PayloadAction<number>) => {
			// state.value += action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			// .addCase(incrementAsync.pending, (state) => {
			// 	state.status = "loading";
			// })
			// .addCase(incrementAsync.fulfilled, (state, action) => {
			// 	state.status = "idle";
			// 	state.value += action.payload;
			// })
			.addCase(fetchJokeboxAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(fetchJokeboxAsync.fulfilled, (state, action) => {
				state.status = "idle";
				state.jokes = action.payload;
			})
			.addCase(fetchBonusJokeAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(fetchBonusJokeAsync.fulfilled, (state, action) => {
				state.status = "idle";
				state.jokes.push(action.payload);
			});
	},
});

export const { decrement, incrementByAmount } = jokeboxSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.jokebox.value)`
export const selectJokebox = (state: RootState) => state.jokebox;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
// 	(amount: number): AppThunk =>
// 	(dispatch, getState) => {
// 		const currentValue = selectCount(getState());
// 		if (currentValue % 2 === 1) {
// 			dispatch(incrementByAmount(amount));
// 		}
// 	};

export default jokeboxSlice.reducer;
